[build-system]
requires = [
  "hatch-vcs>=0.4",
  "hatchling>=1.21",
]
build-backend = "hatchling.build"

[project]
name = "tox-uv"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = [
  "testing"
]
authors = [
  { name = "Grzegorz Bokota", email = "bokota+github@gmail.com" },
]
classifiers = [
  "Framework :: tox",
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Software Development :: Testing",
]
dependencies = [
  "tox>=4,<5",
  "uv",
]

[project.entry-points.tox]
uv = "tox_uv.plugin"


[project.urls]
Documentation = "https://github.com/czaki/tox-uv#readme"
Issues = "https://github.com/czaki/tox-uv/issues"
Source = "https://github.com/czaki/tox-uv"

[tool.hatch.version]
path = "src/tox_uv/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.types]
dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/tox_uv tests}"

[tool.coverage.run]
source_pkgs = ["tox_uv", "tests"]
branch = true
parallel = true
omit = [
  "src/tox_uv/__about__.py",
]

[tool.coverage.paths]
tox_uv = ["src/tox_uv", "*/tox-uv/src/tox_uv"]
tests = ["tests", "*/tox-uv/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.ruff]
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"
fix=true

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
  "F", # Pyflakes
  "E", "W", # pycodestyle
  "C90", # McCabe complexity
  "I", # Import order
  "N", # Naming pep8
  "D", # Docstyle
  "UP", # pyupgrade
  "PL", # pylint
  "PERF", # perflint
  "RUF", # ruff specific rules
]
ignore = ["D212", "D203"]

[tool.ruff.format]
docstring-code-format = true
